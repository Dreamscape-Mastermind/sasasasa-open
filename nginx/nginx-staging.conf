server {
    server_name staging.sasasasa.co;

    # ====== SECURITY HEADERS ======
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: https://www.google-analytics.com https://analytics.google.com; frame-ancestors 'self';" always;


    # ====== BLOCK SENSITIVE FILES ======
    location ~* \.(env|git|conf|config|ini|yaml|yml|toml|log|bak|tmp|swp)$ {
        deny all;
        return 404;
    }
    location ~ /\.(vscode|idea|github|git|DS_Store) {
        deny all;
        return 404;
    }
    # location ~ /\. {
    #     deny all;
    #     return 404;
    # }


    # ====== MAIN APPLICATION ======
    location / {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;

        # Websockets + streaming
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Prevent double compression issues
        proxy_set_header Accept-Encoding "";

        # Disable buffer for React Server Components streaming
        proxy_buffering off;

        # Timeouts for SSR (can adjust)
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_redirect off;
        proxy_cache_bypass $http_upgrade;
    }

    # ====== LOGGING ======
    access_log /var/log/nginx/sasasasa-staging.access.log;
    error_log /var/log/nginx/sasasasa-staging.error.log;

    # ====== SSL / HTTPS ======
    listen 443 ssl http2; # Certbot
    ssl_certificate /etc/letsencrypt/live/staging.sasasasa.co/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/staging.sasasasa.co/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

# HTTP Redirect to HTTPS
server {
    listen 80;
    server_name staging.sasasasa.co;
    return 301 https://$host$request_uri;
}
