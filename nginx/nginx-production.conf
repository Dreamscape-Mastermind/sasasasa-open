server {
    server_name sasasasa.co www.sasasasa.co;

    # ====== SECURITY HEADERS ======
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;

    # ====== BLOCK SENSITIVE FILES ======
    location ~* \.(env|git|conf|config|ini|yaml|yml|toml|log|bak|tmp|swp)$ {
        deny all;
        return 404;
    }
    location ~ /\.(vscode|idea|github|git|DS_Store) {
        deny all;
        return 404;
    }

    # ====== STATIC NEXT ASSETS (cache hard) ======
    location ^~ /_next/static/ {
        expires 1y;
        add_header Cache-Control "public, immutable, max-age=31536000" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://localhost:3000;
    }

    # ====== COMMON STATIC ASSETS ======
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|webp|ico|ttf|otf|woff|woff2)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, s-maxage=2592000" always;
        proxy_pass http://localhost:3000;
    }

    # ====== MAIN APP (SSR / RSC streaming) ======
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;

        # Forward headers
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Websockets/streaming
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Disable buffering for streaming (RSC/SSR)
        proxy_buffering off;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Optional: avoid double compression (let Nginx compress)
        proxy_set_header Accept-Encoding "";
    }

    # ====== LOGGING ======
    access_log /var/log/nginx/sasasasa-production.access.log;
    error_log  /var/log/nginx/sasasasa-production.error.log;

    # ====== SSL / HTTPS ======
    listen 443 ssl http2;
    ssl_certificate     /etc/letsencrypt/live/sasasasa.co/fullchain.pem;   # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/sasasasa.co/privkey.pem;     # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf;                      # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;                        # managed by Certbot
}

server {
    if ($host = www.sasasasa.co) {
        return 301 https://$host$request_uri;
    }
    if ($host = sasasasa.co) {
        return 301 https://$host$request_uri;
    }
    listen 80;
    server_name sasasasa.co www.sasasasa.co;
    return 404; # managed by Certbot
}
